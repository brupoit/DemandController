{"version":3,"file":"loader.js","sourceRoot":"","sources":["loader.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH;;;GAGG;AACH,MAAM,aAAa,GAAkB,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;IACnE,sEAAsE;IACtE,2EAA2E;IAC3E,YAAY;IACZ,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,MAAM;QAC9C,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;QAC5C,OAAO,EAAE,CAAC;KACX;SAAM;QACL,sCAAsC;QACtC,IAAI,YAAY,GAA2B,QAAQ,CAAC,aAAa,CAC7D,wDAAwD,CAAC,CAAC;QAC9D,IAAI,CAAC,YAAY,EAAE;YACjB,wCAAwC;YACxC,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,+DAA+D;YAC/D,YAAY,CAAC,GAAG,GAAG,0CAA0C,CAAC;YAC9D,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;SACzC;QACD,YAAY,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAqB,CAAC,CAAC;QAC7D,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;KAChD;AACH,CAAC,CAAC,CAAC;AASH;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,WAAyB,EAAE;IACpD,MAAM,aAAa,CAAC;IACpB,MAAM,EACJ,OAAO,GAAG,SAAS,EACnB,QAAQ,GAAG,CAAC,WAAW,CAAC,EACxB,QAAQ,GAAG,QAAQ,CAAC,eAAe,CAAC,IAAI,IAAI,IAAI,EAChD,UAAU,GACX,GAAG,QAAQ,CAAC;IACb,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE;QACjC,UAAU,EAAE,QAAQ;QACpB,UAAU,EAAE,QAAQ;QACpB,YAAY,EAAE,UAAU;KACzB,CAAC,CAAC;AACL,CAAC;AAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,IAA6B;IAE3D,yEAAyE;IACzE,MAAM,IAAI,EAAE,CAAC;IACb,IAAI,IAAI,IAAI,IAAI,EAAE;QAChB,OAAO,IAAI,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;KAC7C;SAAM,IAAK,IAAuC,CAAC,eAAgB,EAAE;QACpE,8BAA8B;QAC9B,OAAO,IAAsC,CAAC;KAC/C;SAAM,IAAK,IAEC,CAAC,IAAI,EAAE,EAAG,kCAAkC;QACvD,oDAAoD;QACpD,OAAO,IAAI,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACjD;SAAM,IAAK,IAAoB,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3C,kDAAkD;QAClD,OAAO,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAmB,CAAC,CAAC;KACnE;SAAM,IAAK,IAAoB,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7C,wBAAwB;QACxB,+DAA+D;QAC/D,oEAAoE;QACpE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;KACpC;IACD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;AACrD,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,SAAsB;IAE7D,yEAAyE;IACzE,MAAM,IAAI,EAAE,CAAC;IACb,6EAA6E;IAC7E,cAAc;IACd,OAAO,IAAI,MAAM,CAAC,aAAa,CAAC,YAAY,CACxC,EAAC,WAAW,EAAE,SAAS,EAA+C,CAAC,CAAC;AAC9E,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2014-2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Promise that resolves when the gviz loader script is loaded, which\n * provides access to the Google Charts loading API.\n */\nconst loaderPromise: Promise<void> = new Promise((resolve, reject) => {\n  // Resolve immediately if the loader script has been added already and\n  // `google.charts.load` is available. Adding the loader script twice throws\n  // an error.\n  if (typeof google !== 'undefined' && google.charts &&\n      typeof google.charts.load === 'function') {\n    resolve();\n  } else {\n    // Try to find existing loader script.\n    let loaderScript: HTMLScriptElement|null = document.querySelector(\n        'script[src=\"https://www.gstatic.com/charts/loader.js\"]');\n    if (!loaderScript) {\n      // If the loader is not present, add it.\n      loaderScript = document.createElement('script');\n      // Specify URL directly to pass JS compiler conformance checks.\n      loaderScript.src = 'https://www.gstatic.com/charts/loader.js';\n      document.head.appendChild(loaderScript);\n    }\n    loaderScript.addEventListener('load', resolve as () => void);\n    loaderScript.addEventListener('error', reject);\n  }\n});\n\ninterface LoadSettings {\n  version?: string;\n  packages?: string[];\n  language?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Loads Google Charts API with the selected settings or using defaults.\n *\n * The following settings are available:\n * - version: which version of library to load, default: 'current',\n * - packages: which chart packages to load, default: ['corechart'],\n * - language: what language to load library in, default: `lang` attribute on\n *   `<html>` or 'en' if not specified,\n * - mapsApiKey: key to use for maps API.\n */\nexport async function load(settings: LoadSettings = {}): Promise<void> {\n  await loaderPromise;\n  const {\n    version = 'current',\n    packages = ['corechart'],\n    language = document.documentElement.lang || 'en',\n    mapsApiKey,\n  } = settings;\n  return google.charts.load(version, {\n    'packages': packages,\n    'language': language,\n    'mapsApiKey': mapsApiKey,\n  });\n}\n\n/** Types that can be converted to `DataTable`. */\nexport type DataTableLike = unknown[][]|{cols: unknown[], rows?: unknown[][]}|\n                            google.visualization.DataTable;\n\n/**\n * Creates a DataTable object for use with a chart.\n *\n * Multiple different argument types are supported. This is because the\n * result of loading the JSON data URL is fed into this function for\n * DataTable construction and its format is unknown.\n *\n * The data argument can be one of a few options:\n *\n * - null/undefined: An empty DataTable is created. Columns must be added\n * - !DataTable: The object is simply returned\n * - {{cols: !Array, rows: !Array}}: A DataTable in object format\n * - {{cols: !Array}}: A DataTable in object format without rows\n * - !Array<!Array>: A DataTable in 2D array format\n *\n * Un-supported types:\n *\n * - Empty !Array<!Array>: (e.g. `[]`) While technically a valid data\n *   format, this is rejected as charts will not render empty DataTables.\n *   DataTables must at least have columns specified. An empty array is most\n *   likely due to a bug or bad data. If one wants an empty DataTable, pass\n *   no arguments.\n * - Anything else\n *\n * See <a\n * href=\"https://developers.google.com/chart/interactive/docs/reference#datatable-class\">the\n * docs</a> for more details.\n *\n * @param data The data which we should use to construct new DataTable object\n */\nexport async function dataTable(data: DataTableLike|undefined):\n    Promise<google.visualization.DataTable> {\n  // Ensure that `google.visualization` namespace is added to the document.\n  await load();\n  if (data == null) {\n    return new google.visualization.DataTable();\n  } else if ((data as google.visualization.DataTable).getNumberOfRows!) {\n    // Data is already a DataTable\n    return data as google.visualization.DataTable;\n  } else if ((data as {\n               cols: unknown[]\n             }).cols) {  // data.rows may also be specified\n    // Data is in the form of object DataTable structure\n    return new google.visualization.DataTable(data);\n  } else if ((data as unknown[][]).length > 0) {\n    // Data is in the form of a two dimensional array.\n    return google.visualization.arrayToDataTable(data as unknown[][]);\n  } else if ((data as unknown[][]).length === 0) {\n    // Chart data was empty.\n    // We throw instead of creating an empty DataTable because most\n    // (if not all) charts will render a sticky error in this situation.\n    throw new Error('Data was empty.');\n  }\n  throw new Error('Data format was not recognized.');\n}\n\n/**\n * Creates new `ChartWrapper`.\n * @param container Element in which the chart will be drawn\n */\nexport async function createChartWrapper(container: HTMLElement):\n    Promise<google.visualization.ChartWrapper> {\n  // Ensure that `google.visualization` namespace is added to the document.\n  await load();\n  // Typings suggest that `chartType` is required in `ChartSpecs`, but it works\n  // without it.\n  return new google.visualization.ChartWrapper(\n      {'container': container} as unknown as google.visualization.ChartSpecs);\n}\n"]}